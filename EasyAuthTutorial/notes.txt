following this tutorial:
https://scotch.io/tutorials/easy-node-authentication-setup-and-local

this is the application structure:
    - app
    ------ models
    ---------- user.js  <!-- our user model -->
    ------ routes.js    <!-- all the routes for our application -->
    - config
    ------ auth.js      <!-- will hold all our client secret keys (facebook, twitter, google) -->
    ------ database.js  <!-- will hold our database connection settings -->
    ------ passport.js  <!-- configuring the strategies for passport -->
    - views
    ------ index.ejs    <!-- show our home page with login links -->
    ------ login.ejs    <!-- show our login form -->
    ------ signup.ejs   <!-- show our signup form -->
    ------ profile.ejs  <!-- after a user logs in, they will see their profile -->
    - package.json      <!-- handle our npm packages -->
    - server.js         <!-- setup our application -->


packages.json has all of the packages we need. so it's easy to install them in this list, just:
npm install

server.js is going to be the glue of the entire app. the idea is to not edit this if it can be helped!

passport object is created at the beginning of the file, then is configured in config/passport.js. then it gets passed along to app/routes.js for using with the routes

routes are pages that it can go to, like home page or login / signup page

start the server:
node server.js

to auto refresh the server each time a file changes, use nodemon:
nodemon server.js

it sort of works but crashes immediately 

{ [Error: Cannot find module '../build/Release/bson'] code: 'MODULE_NOT_FOUND' }
js-bson: Failed to load c++ bson extension, using pure JS version
events.js:141
      throw er; // Unhandled 'error' event
      ^

config/database.js is where the info for the database goes. using modulus.io for a mongodb databse

now added routes.js. it's sort of like middleware, for example, you can protect certain routes like the profile section - a user has to be logged in to access it

trying to figure out the error from above, forgot to install xcode command line tools:
xcode-select --install

and then re-install all the node modules

(didn't work)

trying this:
npm install -g node-gyp 

(didn't work)

tried this:
cd node_modules/mongoose/
npm install bson

(didn't work)

tried deleting everything and using sudo npm install, still didn't work

tried changing index.js in bson, to go to the browser_build directory, still didn't work

tried deleting mongoose package and npm install mongoose@3.8.23, still doesn't work

tried cloning js-bson git clone https://github.com/mongodb/js-bson.git and using it as the install, but it still didn't work








