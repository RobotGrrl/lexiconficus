/*
 * Robot Missions Operator Interface
 * ---------------------------------
 *
 * Communications with the robot using Robot Missions's
 * hardware interface. Uses an Xbee to connect with the
 * robot. Xbee is on Serial1.
 *
 * Erin RobotGrrl for Robot Missions
 * --> http://RobotMissions.org
 *
 * Using Teensy 3.6, works with Teensy 3.2
 * 
 * Erin RobotGrrl
 * Jan. 3rd, 2018
 *
 * MIT license, check LICENSE for more information
 * All text above must be included in any redistribution
 *
 */

#include "Arduino.h"
#include <Streaming.h>
#include <XBee.h>
#include "PromulgateBig.h"
#include <Bounce2.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#ifndef _OPINTERFACE_H_
#define _OPINTERFACE_H_

//#define DEBUG false
#define COMM_DEBUG false
#define OP_DEBUG false
#define BUTTON_DEBUG true

// speeds
#define MAX_SPEED 255
#define MIN_SPEED 120
#define TURN_SPEED_FWD 180
#define TURN_SPEED_REV 180

// button pins
#define BUTTON1 7
#define BUTTON2 8
#define BUTTON3 14
#define BUTTON4 2
#define BUTTON5 3
#define BUTTON6 4

// buttons
#define DEBOUNCE 20

// mode switch
#define MODE_SW A10
#define MODE1_THRESH 1000 // 1023
#define MODE2_THRESH 500  // 512
#define MODE3_THRESH 0    // 1
#define MODE1 1
#define MODE2 2
#define MODE3 3

// led pins
#define BOARD_LED 13
#define LED1 5
#define LED2 6
#define LED3 20
#define LED4 23
#define LED5 22
#define LED6 21

// speaker pin
#define SPEAKER 10

// display pins
#define OLED_RESET 12

// messages
#define MSG_QUEUE_SIZE 3

// joystick
#define JOYSTICK_X 16
#define JOYSTICK_Y 17
#define JOYSTICK_SW 15
#define ACTIVITY_TIMEOUT 1000
#define IDLE_UPDATE_FREQ 250
#define MAX_X 1015  // left
#define MIN_X 1     // right
#define MAX_Y 1023  // up
#define MIN_Y 1     // down
#define ZERO_ZONE 30

// states
#define IDLE_STATE 0
#define DRIVE_STATE 1
#define ARM_STATE 2
#define DUMP_STATE 3
#define SCOOP_S_STATE 4
#define SCOOP_F_STATE 5
#define EMPTY_STATE 6

// xbee
#define XBEE_COORDINATOR_DH 0x00000000
#define XBEE_COORDINATOR_DL 0x00000000 // to coordinator
//#define XBEE_COORDINATOR_DL 0x0000FFFF // broadcast

// vars
#define MAX_ROBOTS 6
#define DEFAULT_RETRY_TIME 250
#define SECONDARY_RETRY_TIME 500
#define REMOTE_OP_TIMEOUT 300

// conns
#define XBEE_CONN 1
#define USB_CONN 2
#define BT_CONN 3

struct Packet {
  char cmd;
  uint8_t key;
  uint16_t val;
};

struct Msg {
  uint8_t priority;
  char action;
  Packet pck1;
  Packet pck2;
  char delim;
};

// width: 128 height: 64
PROGMEM const unsigned char robot_missions_logo[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0f, 0xff, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1f, 0xff, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3f, 0xfe, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7f, 0xfc, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xff, 0xf8, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xff, 0xf0, 0x01, 0xff, 0xe0, 0x06, 0xe3, 0xe1, 0xbc, 0x1f, 0x0f, 0x80, 0x00, 0x00, 0x00, 
0x01, 0xff, 0xe0, 0x00, 0xff, 0xf0, 0x07, 0xe7, 0xf1, 0xfe, 0x3f, 0x8f, 0x80, 0x00, 0x00, 0x00, 
0x03, 0xff, 0xc0, 0xe0, 0x7f, 0xf8, 0x07, 0x0e, 0x39, 0xc7, 0x71, 0xc6, 0x00, 0x00, 0x00, 0x00, 
0x03, 0xff, 0x81, 0xf0, 0x3f, 0xf8, 0x06, 0x0c, 0x19, 0x83, 0x60, 0xc6, 0x00, 0x00, 0x00, 0x00, 
0x03, 0xff, 0x03, 0x98, 0x1f, 0xf8, 0x06, 0x0c, 0x19, 0x83, 0x60, 0xc6, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xfe, 0x07, 0x0c, 0x0f, 0xfc, 0x06, 0x0c, 0x19, 0x83, 0x60, 0xc6, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xfc, 0x0f, 0x06, 0x07, 0xfc, 0x06, 0x0e, 0x39, 0xc7, 0x71, 0xc6, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xf8, 0x0f, 0x02, 0x03, 0xfc, 0x06, 0x07, 0xf1, 0xfe, 0x3f, 0x87, 0xc0, 0x00, 0x00, 0x00, 
0x0f, 0xf0, 0x1f, 0xc3, 0x01, 0xfe, 0x06, 0x03, 0xe1, 0xbc, 0x1f, 0x03, 0x80, 0x00, 0x00, 0x00, 
0x0f, 0xe0, 0x1f, 0x81, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0xc0, 0x3f, 0x21, 0x80, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0x80, 0x3f, 0xc0, 0x80, 0x3e, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0x00, 0x3f, 0x98, 0x80, 0x1e, 0x00, 0x00, 0x06, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0x80, 0x3f, 0xf0, 0x80, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0xc0, 0x3f, 0xc1, 0x80, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0xe0, 0x1f, 0xc1, 0x00, 0xfe, 0x06, 0xf3, 0xc6, 0x3e, 0x0f, 0x8c, 0x3e, 0x1b, 0xe3, 0xe0, 
0x0f, 0xf0, 0x1f, 0xe3, 0x01, 0xfe, 0x07, 0xff, 0xe6, 0x7f, 0x1f, 0xcc, 0x7f, 0x1f, 0xf7, 0xf0, 
0x07, 0xf8, 0x0f, 0xe2, 0x03, 0xfc, 0x07, 0x1c, 0x66, 0x61, 0x98, 0x6c, 0xe3, 0x9c, 0x36, 0x18, 
0x07, 0xfc, 0x0f, 0xe6, 0x07, 0xfc, 0x06, 0x18, 0x66, 0x70, 0x1c, 0x0c, 0xc1, 0x98, 0x37, 0x00, 
0x07, 0xfe, 0x07, 0xec, 0x0f, 0xfc, 0x06, 0x18, 0x66, 0x1e, 0x07, 0x8c, 0xc1, 0x98, 0x31, 0xe0, 
0x03, 0xff, 0x03, 0xf8, 0x1f, 0xf8, 0x06, 0x18, 0x66, 0x03, 0x00, 0xcc, 0xc1, 0x98, 0x30, 0x30, 
0x03, 0xff, 0x81, 0xf0, 0x3f, 0xf8, 0x06, 0x18, 0x66, 0x61, 0x98, 0x6c, 0xe3, 0x98, 0x36, 0x18, 
0x03, 0xff, 0xc0, 0xe0, 0x7f, 0xf8, 0x06, 0x18, 0x66, 0x7f, 0x9f, 0xec, 0x7f, 0x18, 0x37, 0xf8, 
0x01, 0xff, 0xe0, 0x40, 0xff, 0xf0, 0x06, 0x18, 0x66, 0x3e, 0x0f, 0x8c, 0x3e, 0x18, 0x33, 0xe0, 
0x00, 0xff, 0xf0, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xff, 0xf8, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7f, 0xfc, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3f, 0xfe, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1f, 0xff, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0f, 0xff, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};


class Operator {

  static Operator *opInstance;
  static void received_action(char action, char cmd, uint8_t key, uint16_t val, char cmd2, uint8_t key2, uint16_t val2, char delim);
  static void transmit_complete();

  public:
    Operator();

    void initOperator(int conn, int baud);
    void updateOperator();
    void calibrateHome();
    void breatheLeds();
    void setCommLed(uint8_t pin);
    void setAutoconnect(bool b);
    unsigned long getCommLatency();
    unsigned long getLastRXTime();

    // Callbacks
    void set_comms_timeout_callback( void (*commsTimeoutCallback)() );
    void set_controller_added_callback( void (*controllerAddedCallback)() );
    void set_controller_removed_callback( void (*controllerRemovedCallback)() );
    void set_received_action_callback( void (*receivedActionCallback)(Msg m) );
    void set_button_changed_callback( void (*buttonChangedCallback)(int button, int value) );

    // Promulgate
    Promulgate promulgate;
    unsigned long current_time;
    unsigned long diff_time;
    unsigned long last_rx_msg;
    unsigned long last_transmit;
    bool use_base64_parsing; // false by default
    uint16_t retry_time = DEFAULT_RETRY_TIME;
    uint8_t retry_count = 0;

    // Xbee
    XBee xbee = XBee();
    XBeeAddress64 addr64 = XBeeAddress64(0x00000000, 0x0000ffff);
    XBeeAddress64 addr_coord = XBeeAddress64(XBEE_COORDINATOR_DH, XBEE_COORDINATOR_DL);
    ZBTxStatusResponse txStatus = ZBTxStatusResponse();
    ZBRxResponse rx = ZBRxResponse();
    char message_tx[64];
    char message_rx[64];
    uint32_t msg_tx_count;
    uint32_t msg_rx_count;
    uint32_t msg_tx_err;
    unsigned long last_rx;
    unsigned long last_tx;
    unsigned long last_retry_time;

    // Xbee Robots
    XBeeAddress64 addr_all_robots[MAX_ROBOTS];
    uint8_t num_addrs = 0;
    uint8_t ind_addr_sent;
    uint8_t failed_send_count[MAX_ROBOTS];
    uint16_t ids_of_all_robots[MAX_ROBOTS];
    long last_rx_all[MAX_ROBOTS];
    long last_rx_check = 0;

    bool SELECTED_ROBOT = false;
    uint16_t SELECTED_ROBOT_ID[MAX_ROBOTS];
    int num_robot_conn = 0;
    XBeeAddress64 selected_robot_addr;

    // Promulgate
    void sendNextMsg();
    void processAction(Msg m);
    void transmitDidComplete();

    // Messages
    Packet pck_none = { '0', 0, 0 };
    Msg msg_none = { 9, '^', pck_none, pck_none, '!' };
    uint8_t getMsgQueueLength();
    Msg popNextMsg();
    void addMsg(uint8_t priority, char action, char cmd, uint8_t key, uint16_t val, char cmd2, uint8_t key2, uint16_t val2, char delim);
    void addMsg(Msg m);
    void insertMsg(Msg m);

    // Conn
    void connRead();
    void connSend(Msg m);
    void connSend(char action, char cmd, uint8_t key, uint16_t val, char cmd2, uint8_t key2, uint16_t val2, char delim);
    void connSendEasy(char c);

    // Display
    Adafruit_SSD1306 display;
    void displayLogo();
    void scrollLogo();
    void displayTitleBar();
    void mainMenu();
    void displaySearchingAnimation();

    // State
    int CURRENT_STATE;
    bool GO_TIME;
    int LAST_STATE;

    // Mode (operator / semi-autonomous / full autonomous)
    int CURRENT_MODE;
    void updateModeSwitch();

    // Joystick
    int HOME_X;
    int HOME_Y;
    bool joystick_on;
    int getJoyX();
    int getJoyY();
    
    // Buttons
    bool getButton(uint8_t b);
    bool getJoystickButton();
    void resetButtonStates();
    
    // LEDs
    long last_led_blink;
    bool led_on;
    void ledsOff();
    void introLedSequence();

    // Speaker
    void buzz(int targetPin, long frequency, long length);

  private:

    // Callbacks
    void (*_commsTimeoutCallback)();
    void (*_controllerAddedCallback)();
    void (*_controllerRemovedCallback)();
    void (*_receivedActionCallback)(Msg m);
    void (*_buttonChangedCallback)(int button, int value);

    // Custom
    uint8_t COMM_LED;
    uint8_t CONN_TYPE;
    bool AUTOCONNECT; // defaults to true

    // Init
    void initLeds();
    void initButtons();
    void initJoystick();
    void initSpeaker();

    // Comms
    uint8_t msgs_in_queue;
    uint8_t msg_send_index;
    Msg msg_queue[MSG_QUEUE_SIZE];
    unsigned long last_rx_comms;
    uint8_t unlikely_count = 0;

    // Conn
    void connBlink();

    // Xbee
    void xbeeSendEasy(char c);
    void xbeeSend(char action, char cmd, uint8_t key, uint16_t val, char cmd2, uint8_t key2, uint16_t val2, char delim);
    void xbeeSendToList(char action, char cmd, uint8_t key, uint16_t val, char cmd2, uint8_t key2, uint16_t val2, char delim);
    void addXbeeToList(XBeeAddress64 newAddr);
    void updateRxTime(XBeeAddress64 senderLongAddress);
    void xbeeWatchdog();
    bool xbeeRead();
    void print32Bits(uint32_t dw);
    void print16Bits(uint16_t w);
    void print8Bits(byte c);

    // Pins
    uint8_t button_pins[7];
    uint8_t led_pins[7];
    uint8_t button_states[7];
    Bounce bounce_buttons[7];

    // Misc
    bool turn_on_spot;
    bool slower_speed;
    uint8_t slow_speed;
    uint8_t letter_itr;
    long last_letter_itr;

    // Joystick
    uint16_t joy_x;
    uint16_t joy_y;
    uint16_t joy_x_prev;
    uint16_t joy_y_prev;
    uint16_t joy_sw;
    bool joystick_idle;
    long last_increment;
    unsigned long last_activity;
    unsigned long last_idle_update;
    bool first_idle;
    
    // Control
    int motor_speed;
    int turn_speed;
    int incr_speed;
    int arm_pos;
    bool scrolling_up;
    void joystickDriveControl();
    void joystickArmControl();

    // Buttons
    void updateButtons();

    // Other
    void xbeeChooseRobotToConnect();

};

#endif